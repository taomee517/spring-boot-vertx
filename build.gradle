allprojects {
    ext {
        springbootVersion = '2.2.4.RELEASE'
        lombokVersion = '1.18.10'
        junitVersion = '4.12'
        vertxVersion = '3.9.0'
        h2Version = '1.4.199'
    }

    //统一引入java插件，子项目可以不用重复配置
    apply plugin: "java"
    //引入gradle发布插件
    apply plugin: "maven-publish"
    sourceCompatibility = 1.8

    group 'org.example'
    version '1.0.0'

    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }

    configurations.all{
        resolutionStrategy(){
            //将冲突解决策略改为发生冲突时报错
            failOnVersionConflict()
            force "org.slf4j:slf4j-api:1.7.30"
            force "org.springframework.boot:spring-boot-starter-jdbc:${springbootVersion}"
            force "org.springframework.boot:spring-boot-starter:${springbootVersion}"
            force "org.springframework.boot:spring-boot:${springbootVersion}"
            force "org.springframework.boot:spring-boot-autoconfigure:${springbootVersion}"
            force "org.springframework:spring-core:5.2.3.RELEASE"
            force "org.springframework:spring-context:5.2.3.RELEASE"
        }
    }

    // 冲突报错 + 以下任务 + 命令行搜索
    // gradlew allDepInsight  --configuration compile --dependency ${keyword}
    //可以搜索出某个jar包被哪些依赖引用，然后用于解决依赖冲突
    //subprojects和allprojects的效果一样
    task allDepInsight(type: DependencyInsightReportTask){
        doFirst {}
    }

    repositories {
        /**先从本地仓库查找jar包*/
        mavenLocal()
        /**再从aliyun镜像下载依赖jar包*/
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        /**再从maven中央仓库下载依赖jar包*/
        mavenCentral()
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter:${springbootVersion}"){
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: "${springbootVersion}"
        // lombok
        compile group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompile group: 'junit', name: 'junit', version: "${junitVersion}"
    }


    publishing{
        publications{
            //publishProject为自定义名称，可写多个发布任务
            publishProject(MavenPublication){
                //发布jar包
                from components.java
            }
        }

        //配置私服地址
        repositories {
            maven{
                //指定私服地址
                url = ""
                credentials{
                    username 'admin'
                    password '123'
                }
            }
        }
    }
}



